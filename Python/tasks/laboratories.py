# Задачи от лабораторните
# отговорите са в папката /Laboratories във файловете със съответните имена

# За точност на задачите не гарантирам, първо пробвай дали работи и след
# това разгледай кода


############################# Лабораторни 1 (задачи) ##############################
# Задача 1:
# Да се състави програма на Python, която извежда съобщението: "Hello, Python!"

# Задача 2:
# Да се състави програма, която да изпълнява аритметичните операции +,-,*,/ 
# на две чила а и b от цял тип. Като за всяка аритметична операция се изведе
# резултат като а и b се въведнат от клавиатурата



############################# Лабораторни 2 (задачи) ##############################
# Задача 1:
# Да се направи програма, която приема три стойности a,b и h и пресмята лицето
# на трапец S=(a+b)*h/2, принтирайте резултата като закръглите до 2-рия знак 
# след десетичната запетая ",". 
# Забележка: print("%.2f" %name)

# Задача 2:
# Чете от клавиатурата r и пресмята и отпечатва лицето и периметъра на окръжност
# с радиус r. Изведете резултата като закръглите до 3-тия знак след десетичната запетая.
# (S = pi*r^2, C = 2pi*r)

# Задача 3:
# Изчислява дневната надница при n-часов работен ден като заплащането за час е числото к
# въвеждано от клавиатурата. Да се изчисли работната надница за 1 месец при 20 дневен работен месец.



############################# Лабораторни 3 (задачи) ##############################
# Задача 1:
# Да се направи програма, в която се въвеждат n цели числа и намира max.
# Първо се въвежда n, след това се въвеждат n на брой числа.

# Задача 2:
# Да се състави програма, която чете число n и проверява дали е > 50,
# ако е така print("bigger than 50") else ("smaller")

# Задача 3:
# Принтирайте от 1 до 10 числата с while

# Задача 4:
# Принтирайте от 1 до 10 като пропусне 5 (continue)



############################# Лабораторни 4 (задачи) ##############################

# Задача 1:
# Да се състави програма, която въвежда n цели числа и намира най-голямото между тях.
# Първо се въвежда n след това се въвежда n на брой числа.

# Задача 2:
# въвежда число n и печата триъгълник от '*'.
# Пример:
# n = 3
# ------------
# *
# **
# ***
# ------------


# Задача 3:
# Да се състави програма, която въвежда n цели числа и ги сумира.

# Задача 4:
# Да се напише програма, която проверява дали дадено число е просто число.



############################# Лабораторни 6 (задачи) ##############################

# Задача 1:
# Напишете програма, в която потребителя въвежда цяло число, а програмата формира 2 кортежа, 
# състоящи се цифрите от това число. Единия с цифрите състоящи се в прав ред, втори, в които са в обратен ред

# tup1 = ()
# n = int(input("Enter a number: "))
# for i in range(1,n+1):
#     tup1 += (i,)
    
# tup2 = sorted(tup1, reverse = True)
# print(tup1)
# print(tup2)

# Задача 2:
# Напишете програма, в която се създава числов списък. Той се запълва със случайни числа, 
# след това от всяка двойка елементи от този списък се вмъква нов равен на сумата от стойностите
#  на предходните два елемента.

# import random
# a = [random.randint(10,20) for i in range(16)]
# # a.insert(2, a[0] + a[1])
# # a.insert(5, a[3]+a[4])
# # a.insert(8,a[6]+a[7])

# for i in range(0,22,3):
#     a.insert(i+2, a[i] + a[i+1])

# print(a)


# Задача 3:
# Напишете програма , в която потребителя въвежда текст и на негова база се създава речник. 
# За ключове на речника служат символите от текста, а стойността на елементите се определя от 
# броя на съответните символи в текста.
# Примерен вход :  SSWTWWTAAA

#             Речникът ще се състои от 4 елемента :

#              А:3     S:2       T:2     W:3

# st = input("Enter a text: ")
# dic = dict()

# for i in st:
#     if not(dic.keys().__contains__(i)):
#         dic[i] = 1
#     else: 
#         dic[i] += 1

# keys = dic.keys()
# for key in keys:
#     print(key, ":",  dic[key], end="\t")


# Задача 4:
# Напишете програма, в която потребителя въвежда чяло число. 
# От него се създава списък състоящ се от числата от 1 до това число . 
# Въз основа на този списък се създава речник, в който елементите на списъка
# служат за ключове на елементите на речника , а стойностите на тези елементи в речника
# са елементите на списъка но в обратен ред.

# Пример : ако сме въвели числото 4 , създава се списъка  [1,2,3,4 ]
#  и на негова основа се създава речник с 4 елемента :   {1:4, 2:3,  3:2,  4:1}

# num = int(input("Enter a number: "))
# list = []
# for i in range(1,num+1):
#     list.append(i)

# dic = dict()
# for i in list:
#     dic[i] = list[len(list) - i]

# print(dic)

############################# Лабораторни 7 (задачи) ##############################
# Function

# Задача 1:
# Напишете програма, която намира лицето на геометрична фигура като първо се въвежда вида на фигурата:
#  1 - квадрат, 2 - правоъгълник, 3 - правоъгълен триъгълник. 
# За пресмятането на лицето на фигурите да се напишат подходящи функции


# Задача 2:
# Напишете потребителска функция , проверяваща дали число е палиндром. 
# Функцията получава като аргумент число, връща като резултат 1, ако числото е палиндром
#  и 0 ако числото не е палиндром.


# Задача 3:
#  Програма, която реализира калкулатор за цели числа. Действията които изпълнява са :
#             Събиране +
#             Изваждане –
#             Умножение *
#             Деление /
# Потребителя въвежда вида на операцията.
# После въвежда две числа и резултата се извежда на екрана . Реализирайте отделни функции за отделните операции.


# Задача 4:
# На функция се подават два аргумента: списък с числа  и число. Променете всички елементи от списъка със 
# стойност по-голяма от даденото число на 0(нула).


# Отговора на задачите е в /Laboratories/function.py

############################# Лабораторни 8 (задачи) ##############################
# Classes

#Задача 1: 
# Да се напише код на Python, който дефинира клас Person с полета
# име (name),  фамилия (family), възраст (age), националност (nationality). 
# Да се дефинира конструктор, който инициализира полетата на класа. 
# Да се добави метод print, който отпечатва имената и националността на съответното лице. 
# Да се създадат обекти-инстанции на класа. За тях  да се извика методът print.

# Задача 2:
# Да се добави към кода от Задача 1 клас Student, наследник на класа Person с две нови полета
# – университет (university) и година на обучение (yearofstudy). Да се предифинира за него методът print,
#  така, че да отпечатва и тези две полета. Да се създадат инстанции на новия клас и за тях да се извика
#  методът print.

# Да се добави: class Lecturer, наследник на Person
#  с две нови полета university, experience - брой години, преподавателски стаж 
# да  се направи print, така че да отпечатва тези две полета


# Отговора на задачите е в /Laboratories/classes.py

############################# Лабораторни 10 (задачи) ##############################
# Errors
 # Отговори няма

# Задача 1:
# Напишете код на метод, който приема като параметър име на текстов файл, 
# прочита съдържанието на файла и го връща като стринг. 
# Какво е правилно да направи методът с възникващите изключения?

# from pathlib import Path
# Str = Path('text.txt').read_text()
# print(Str)

# Задача 2:
#  Да се открият и прегледат всички стандартни изключения на Python

# Exception context, Base classes, Concrete exceptions, 

# Задача 3:
# Прегледайте от документацията на Python информацията за основните изключения
# BaseException, Exception, ArithmeticError, BufferError, LookupError


# exception Exception

#     All built-in, non-system-exiting exceptions are derived from this class.
#      All user-defined exceptions should also be derived from this class.

# exception ArithmeticError

#     The base class for those built-in exceptions that are raised for various arithmetic errors:
#      OverflowError, ZeroDivisionError, FloatingPointError.

# exception BufferError

#     Raised when a buffer related operation cannot be performed.

# exception LookupError

#     The base class for the exceptions that are raised when a key or index used on a mapping or sequence is invalid:
#      IndexError, KeyError. This can be raised directly by codecs.lookup().


# Задача 2:
# Напишете програма, която прочита от конзолата цяло положително число
#  и отпечатва на конзолата корен квадратен от това число. Ако числото е отрицателно или невалидно,
#  да се изпише “Invalid Number”. Във всички случаи накрая да се изпише “Good Bye”.

# Задача 3:
# Да се състави програма на Python, която дефинира клас Travel с полета: ID, Destination, Flight, Price.
#  Да се добави метод „Reduce“, чрез който всички стойности от полето Price по-големи от 200
#  да бъдат заменени със стойност по-ниска с 10%. Да се добави и методът Print,
#  чрез който да се отпечатят ID, Destination, Flight, Price.

# Задача 4:
# Напишете програма на Python, за да получите следващия ден от дадена дата (въведена от потребителя).
# Пример:
# Input a year: 1974
# Input a month [1-12]: 2
# Input a day [1-31]: 15
# The next date is [yyyy-mm-dd] 1974-2-16.


############################# Лабораторни 11 (задачи) ##############################
# Modules
# Задачи за модули са в папки Calculator и FigureAreas
# /Laboratories/Calculator
# /Laboratories/FigureAreas


############################# Лабораторни 12 (задачи) ##############################
# Files
# Отговори на тези задачи няма

# Задача 1:
# Да се създаде програма, която да чете предварително направен файл и да извежда съдържанието му ред по ред с помоща
#  на for цикъл

# file = open("myTxt.txt.txt","r")
# for line in file:
#     print(line)
# file.close()

# Задача 2:
# Да се създаде двоичен файл с document.bin, създадения файл да се отвори и реализира запис в подходящ режим на стринга
#  "This is good", който да се декодира в ASCII код. 
# За записа да се използва метода file.write(), а за затваряне на файла метода file.close().


# Задача 3:
#  Създайте клас, който представя студентите във вашата група:
# Напишете метод, който записва дданни във файл, чете файла и създава списък на студентите.
# Напишете метод, който да добавя студенти, които не са записани в списъка студенти
# Напишете метод remove, който да трие студент със слаб успех
# Напишете метод за намиране на среден успех на група
# Напишете метод за намиране на минимален и максимален успех
# Напишете метод copy, който да копира студенти с начална буква 'А'в нов списък, който метода връща
# Напишете метод, който връща данните за студентите с един и същ успех
# Напишете метод, който да връща данни за студентите с четен номер и с максимален успех
#-------------------------------------------------------------------------------------------
# Напишете метод move, който мести студенти с отличен успех...
# Напишете метод, който връща данни за студентите с един и същи успех
# метод, който връща данните за студентите с четен номер и минимален успех
# метод, който представя имената на студентите само с големи букви 




# Задача 4:
# Да се създаде функция приход от списък със стоки, с цена-количество. 
# Да се извърши търсене по код и ако кода фигурира да се създаде намаление с 10%. 
# Ако го няма да се генерира друг код с поредица от 4 нули и съобщение: "Зареди продукта." 
# Да се изчисли средно-аритметичната и цена на списъкиа със стоки.



############################# Лабораторни 13 (задачи) ##############################
# JSON

# Задача 1: 
# Да се създаде програма, която чете  двуичен файл document.bin,
#  като се използва режим за четене на двуичен файл, да се използва метода за четене read и print
#  за извеждане на първите четири букви от "This is good!"

# doc = open("Laboratories\lab13\document.bin", "wb")
# doc.write(b"This is good")
# doc = open("document.bin","rb")
# print(doc.read(4))
# doc.close()


# Задача 2:
# Да се създаде програма на python, която да преобразува python обект в json данни
# .dumps()

# x = ["JSON","Read","Write"]

# jsonStr = json.dumps(x)
# print(jsonStr)