# Задачи от упражненията
# отговорите са в папката /Exercises във файловете със съответните имена

# За точност на задачите не гарантирам, първо пробвай дали работи и след
# това разгледай кода


########################### Упражнение 2 (задачи) ##############################
# Задача 1: 
# Да се състави програма от n цели числа и да ги сумира.

########################### Упражнение 7 (задачи) ##############################
#Function

# Задача 1:
# Напишете програма, която намира лицето на геометрична фигура, като първо се въвежда вида на фигурата. 
# Първо квадртат, след това правоъгълник и правоъгълен триъгълник. За пресмятането на лицето на съответните
# фигуре да се запишат подходящи формули.

# Отговор на задачата в /Exercises/function.py


########################### Упражнение 9 (задачи) ##############################
# Classes
# Задача 1:
# Съставете програма на Python с използването на клас за превръщане на число за преобръщането му
# от десетичен вид в римския му еквивалент

# Задача 2:
# Да се състави програма на Python с използването на клас за обръщането на низ дума по дума

# Отговор на задачите в /Exercises/classes

########################### Упражнение 11 (задачи) ##############################
# Classes
# Задача 1:
# Създайте клас, който представя студентите от вашата група.
# Напишете метод, който по дадено име създава само студенти, които не са създадени от списъка от студенти.

# Задача 2:
# и напишете метод remove за триене на студент с оценка слаб

# Задача 3:
# и напишете метод за намиране на среден успех

# Отговор на задачите в /Exercises/classes

########################### Упражнение 13 (задачи) ##############################
# Недовършена задача

# Задача 3:
#  Създайте клас, който представя студентите във вашата група:
# Напишете метод, който записва данни във файл, чете файла и създава списък на студентите.
# Напишете метод, който да добавя студенти, които не са записани в списъка студенти
# Напишете метод remove, който да трие студент със слаб успех
# Напишете метод за намиране на среден успех на група
# ??? Напишете метод за намиране на минимален и максимален успех
# Напишете метод copy, който да копира студенти с начална буква 'А'в нов списък, който метода връща
# Напишете метод, който връща данните за студентите с един и същ успех
# ??? Напишете метод, който да връща данни за студентите с четен номер и с максимален успех
#-------------------------------------------------------------------------------------------
# ??? Напишете метод move, който мести студенти с отличен успех...
# ??? метод, който връща данните за студентите с четен номер и минимален успех
# метод, който представя имената на студентите само с големи букви 

# class St:
#     def __init__(self):
#         self.students = {
#             "Anna": 3,
#             "Boris" : 6,
#             "George": 4,
#             "Celine": 2,
#             "Peter": 4,
#             "Silvester": 5,
#             "David": 3,
#         }

#     # Write data to a file
#     def wd(self):
#         # Writing
#         data = open("Exercises\exercise13\data.txt", mode="w", encoding="utf-8")
#         for st, gr in self.students.items():
#             data.write(f"{st} - {gr}\n")

    # Add students that are not in the student list
    # def ads(self):
    #     name = input("Add student:  ")
    #     grade = int(input("Student's grade:  "))
    #     if name not in self.students:
    #         self.students[name] = grade;
    #     else:
    #         print("The student is in the class!")

    # # Remove student with a F grade
    # def rm(self):
    #     self.students = {st:gr for st,gr in self.students.items() if gr != 2}

    # # Average score
    # def avg_sc(self):
    #     gr = self.students.values()
    #     print(sum(gr) / len(gr))
            
    # Copy the name starting with 'A' to a new list and return it

    # Returns the data of students with the same value

    # Returns the students with upper case letters


# Задача 4:
# Да се създаде функция приход от списък със стоки, с цена-количество. 
# Да се извърши търсене по код и ако кода фигурира да се създаде намаление с 10%. 
# Ако го няма да се генерира друг код с поредица от 4 нули и съобщение: "Зареди продукта." 
# Да се изчисли средно-аритметичната и цена на списъкиа със стоки.